name: Build and Deploy Hugo Site

on:
  push:
    branches:
      - main  # 每当主分支有推送时触发

jobs:
  build:
    runs-on: ubuntu-latest  # 选择 Ubuntu 最新版的虚拟环境
    
    steps:
      # Step 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'  # 确保子模块也被检出

      # Step 2: 设置 Hugo 环境
      - name: Set up Hugo
        uses: peaceiris/actions-hugo@v2

      # Step 3: 安装依赖
      - name: Install Dependencies
        run: |
          hugo mod get -u  # 获取 Hugo 模块依赖，适用于带模块的 Hugo 项目

      # Step 4: 构建网站
      - name: Build Hugo site
        run: |
          hugo --minify  # 生成静态文件并最小化
          ls -la public  # 打印 public 目录内容，帮助我们调试是否生成了

      # Step 5: 强制清除本地修改
      - name: Discard local changes
        run: git reset --hard

      # Step 6: 切换到 gh-pages 分支
      - name: Checkout gh-pages branch
        run: |
          git fetch origin gh-pages
          git checkout gh-pages

      # Step 7: 将 public 目录的内容复制到当前目录
      - name: Copy public files
        run: |
          ls -la public  # 确认 public 目录存在
          cp -R public/* .  # 复制 public 目录下的内容

      # Step 8: 设置 Git 配置
      - name: Set Git config for Git push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      # Step 9: 提交并推送到 gh-pages 分支
      - name: Commit and Push to gh-pages
        run: |
          git add .
          git commit -m "Deploy updated site"
          git push origin gh-pages

      # Step 10: 使用 GitHub Token 进行认证
      - name: Authenticate using GitHub token
        env:
          GITHUB_TOKEN: ${{ secrets.BLOG }}  # 使用 GitHub 自动生成的 token
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
